{
  "basePath": "/",
  "definitions": {
    "Announcement": {
      "properties": {
        "body": {
          "description": "Body of the announcement",
          "example": "Here are some details about the thing I announced",
          "type": "string"
        },
        "created": {
          "description": "Date the announcement was created",
          "example": "12/04/1999",
          "type": "string"
        },
        "media_url": {
          "description": "URL for image to act as header for the post",
          "example": "http://myhost.com/img/img.png",
          "type": "string"
        },
        "published": {
          "description": "Whether the announcement has been published",
          "example": false,
          "type": "boolean"
        },
        "title": {
          "description": "Title of the announcement",
          "example": "I announced a thing",
          "type": "string"
        },
        "updated": {
          "description": "Date the announcement was last updated",
          "example": "12/04/1999",
          "type": "string"
        },
        "user_id": {
          "description": "ID of the user creating/updating the announcement",
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "title",
        "body"
      ]
    },
    "BaseUser": {
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ]
    },
    "Project": {
      "properties": {
        "allow_anonymous_contributors": {
          "description": "Allow anonymous contributors",
          "example": false,
          "type": "boolean"
        },
        "contacted": {
          "description": "If the project owner had been emailed",
          "example": false,
          "type": "boolean"
        },
        "created": {
          "description": "Date the announcement was created",
          "example": "12/04/1999",
          "type": "string"
        },
        "description": {
          "description": "Short description",
          "example": "Here is my project",
          "maxLength": 255,
          "type": "string"
        },
        "featured": {
          "description": "If the project is featured",
          "example": false,
          "type": "boolean"
        },
        "long_description": {
          "description": "A more detailed description",
          "example": "Here is my project with some more information",
          "type": "string"
        },
        "name": {
          "description": "Project name",
          "example": "My project",
          "maxLength": 255,
          "type": "string"
        },
        "owner_id": {
          "description": "Project owner ID",
          "example": 1,
          "type": "integer"
        },
        "published": {
          "description": "Whether the announcement has been published",
          "example": false,
          "type": "boolean"
        },
        "short_name": {
          "description": "Name to refer to project (slug)",
          "example": "myproj",
          "maxLength": 255,
          "type": "string"
        },
        "updated": {
          "description": "Date the announcement was last updated",
          "example": "12/04/1999",
          "type": "string"
        },
        "user_id": {
          "description": "ID of the user creating/updating the announcement",
          "example": 1,
          "type": "integer"
        },
        "webhook": {
          "description": "Project webhook",
          "example": "http://myhost.com/hook",
          "type": "string"
        }
      },
      "required": [
        "name",
        "short_name",
        "description",
        "long_description",
        "owner_id"
      ]
    },
    "Result": {
      "properties": {
        "info": {
          "description": "Value of the result",
          "example": {
            "message": "task done"
          },
          "type": "object"
        }
      },
      "required": [
        "name",
        "short_name",
        "description",
        "long_description",
        "owner_id"
      ]
    },
    "Task": {
      "properties": {
        "info": {
          "description": "Task information",
          "example": {
            "question": "Who am I?",
            "user": "HAL"
          },
          "type": "object"
        },
        "n_answers": {
          "description": "Number of answers expected",
          "example": 30,
          "maxLength": 255,
          "type": "integer"
        },
        "project_id": {
          "description": "Project ID",
          "example": 1,
          "type": "integer"
        }
      },
      "required": [
        "project_id",
        "info",
        "n_answers",
        "long_description",
        "owner_id"
      ]
    },
    "User": {
      "properties": {
        "confirm": {
          "description": "Whether the username has been confirmed",
          "type": "boolean"
        },
        "email": {
          "description": "Contact email",
          "example": "barry@manilow.com",
          "maxLength": 255,
          "type": "string"
        },
        "fullname": {
          "description": "user's full name",
          "example": "Barry Manilow",
          "maxLength": 255,
          "type": "string"
        },
        "password": {
          "description": "user's password",
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ]
    }
  },
  "host": "localhost:5000",
  "info": {
    "contact": {
      "email": "support@scifabric.com",
      "url": "https://www.pybossa.com"
    },
    "description": "API for the Pybossa project",
    "termsOfService": "NOT SET",
    "title": "Pybossa API",
    "version": "0.0.1"
  },
  "operationId": "pbData",
  "paths": {
    "/account/profile": {
      "get": {
        "parameters": [
          {
            "default": "application/json",
            "enum": [
              "application/json",
              "text/html"
            ],
            "in": "header",
            "name": "Content-Type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": "application/json",
            "description": "The user info"
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "summary": "GET to retrieve the current user's profile",
        "tags": [
          "Users"
        ]
      }
    },
    "/account/register": {
      "get": {
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BaseUser"
            },
            "type": "object"
          },
          {
            "default": "application/json",
            "enum": [
              "application/json",
              "text/html"
            ],
            "in": "header",
            "name": "Content-Type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": "application/json",
            "description": "The user was signed in successfully"
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "summary": "GET to retrieve the CSRF token for signing in a user",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            },
            "type": "object"
          },
          {
            "in": "header",
            "name": "X-CSRFToken",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The user was signed in successfully"
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "summary": "POST to sign in a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/account/signin": {
      "get": {
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BaseUser"
            },
            "type": "object"
          },
          {
            "default": "application/json",
            "enum": [
              "application/json",
              "text/html"
            ],
            "in": "header",
            "name": "Content-Type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": "application/json",
            "description": "The user was signed in successfully"
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "summary": "GET to retrieve the CSRF token for signing in a user",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            },
            "type": "object"
          },
          {
            "in": "header",
            "name": "X-CSRFToken",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The user was signed in successfully"
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "summary": "POST to sign in a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/account/{name}/": {
      "get": {
        "parameters": [
          {
            "default": "application/json",
            "enum": [
              "application/json",
              "text/html"
            ],
            "in": "header",
            "name": "Content-Type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": "application/json",
            "description": "The user info"
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "summary": "GET to retrieve the current user's profile",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/announcement": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of announcements (or one matching the provided ID)",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "security": [
          {
            "APIKeyQueryParam": []
          }
        ],
        "summary": "GET all annoucements",
        "tags": [
          "Announcements"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "announcement",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            },
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The created announcement",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "security": [
          {
            "APIKeyQueryParam": []
          }
        ],
        "summary": "POST an annoucement",
        "tags": [
          "Announcements"
        ]
      }
    },
    "/api/announcement/{oid}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "announcement",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            },
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "The announcement that was deleted",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "security": [
          {
            "ApiKeyQueryParam": []
          }
        ],
        "summary": "DELETE an existing isntance of Announcement (only as admin)",
        "tags": [
          "Announcements"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of announcements (or one matching the provided ID)",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "security": [
          {
            "APIKeyQueryParam": []
          }
        ],
        "summary": "GET all annoucements",
        "tags": [
          "Announcements"
        ]
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": true
          },
          {
            "examples": {
              "application/json": {
                "id": 38,
                "title": "T-shirt"
              }
            },
            "in": "body",
            "name": "announcement",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            },
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The modified announcement"
          }
        },
        "security": [
          {
            "APIKeyQueryParam": []
          }
        ],
        "summary": "PUT an annoucement",
        "tags": [
          "Announcements"
        ]
      }
    },
    "/api/favorites": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "string"
          },
          {
            "in": "desc",
            "name": "description",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of tasks currently favorited by the user"
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "summary": "GET all tasks favorited by the current user",
        "tags": [
          "Favorites"
        ]
      },
      "post": {
        "parameters": [
          {
            "description": "The task ID to favorite",
            "in": "body",
            "name": "task_id",
            "schema": {
              "properties": {
                "task_id": {
                  "type": "integer"
                }
              },
              "required": [
                "task_id"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The task that was favorited"
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "security": [
          {
            "APIKeyQueryParam": []
          }
        ],
        "summary": "POST a favourite task for the current user",
        "tags": [
          "Favorites"
        ]
      }
    },
    "/api/favorites/{oid}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "string"
          },
          {
            "in": "desc",
            "name": "description",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of tasks currently favorited by the user"
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "summary": "GET all tasks favorited by the current user",
        "tags": [
          "Favorites"
        ]
      }
    },
    "/api/project": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of projects requested (or the project matching the provided ID)",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "summary": "GET all projects",
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "project",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The project that was created",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "security": [
          {
            "APIKeyQueryParam": []
          }
        ],
        "summary": "POST to create a project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/project/{oid}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": true
          },
          {
            "in": "body",
            "name": "project",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "The project that was deleted"
          }
        },
        "summary": "DELETE an existing instance of Project",
        "tags": [
          "Projects"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of projects requested (or the project matching the provided ID)",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "summary": "GET all projects",
        "tags": [
          "Projects"
        ]
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "project",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "The project that was changed",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "summary": "Change an existing instance of Project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/result": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of results",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          }
        },
        "summary": "GET a list of results (or one matching the ID)",
        "tags": [
          "Results"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "result",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Result"
            },
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "Result created",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          }
        },
        "summary": "POST a Result",
        "tags": [
          "Results"
        ]
      }
    },
    "/api/result/{oid}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The project that was deleted"
          }
        },
        "summary": "DELETE an existing instance of Result",
        "tags": [
          "Results"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of results",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          }
        },
        "summary": "GET a list of results (or one matching the ID)",
        "tags": [
          "Results"
        ]
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "result",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Result"
            },
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "Result created",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          }
        },
        "summary": "PUT a Result",
        "tags": [
          "Results"
        ]
      }
    },
    "/api/task": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of projects requested (or the project matching the provided ID)"
          }
        },
        "summary": "GET all tasks",
        "tags": [
          "Tasks"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "task",
            "required": true,
            "schema": {
              "$ref": "#/definitons/Task"
            },
            "type": "object"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The task that was created",
            "schema": {
              "$ref": "#/definitons/Task"
            }
          },
          "401": {
            "description": "Access Denied"
          }
        },
        "security": [
          {
            "APIKeyQueryParam": []
          }
        ],
        "summary": "POST to create a task",
        "tags": [
          "Tasks"
        ]
      }
    },
    "/api/task/{oid}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": true
          },
          {
            "in": "body",
            "name": "task",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            },
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "The task that was deleted",
            "schema": {
              "$ref": "#/definitons/Task"
            }
          }
        },
        "security": [
          {
            "APIKeyQueryParam": []
          }
        ],
        "summary": "DELETE an existing instance of a Task",
        "tags": [
          "Tasks"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of projects requested (or the project matching the provided ID)"
          }
        },
        "summary": "GET all tasks",
        "tags": [
          "Tasks"
        ]
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": true
          },
          {
            "in": "body",
            "name": "task",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            },
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "The task that was edited",
            "schema": {
              "$ref": "#/definitons/Task"
            }
          }
        },
        "security": [
          {
            "APIKeyQueryParam": []
          }
        ],
        "summary": "PUT to modify an existing instance of a Task",
        "tags": [
          "Tasks"
        ]
      }
    },
    "/api/user": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of users (or one matching the provided ID)"
          }
        },
        "summary": "GET all users",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/user/{oid}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of users (or one matching the provided ID)"
          }
        },
        "summary": "GET all users",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "oid",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The user that was changed"
          }
        },
        "summary": "Change an existing isntance of a User",
        "tags": [
          "Users"
        ]
      }
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "APIKeyQueryParam": {
      "in": "query",
      "name": "api_key",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}